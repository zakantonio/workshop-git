{
  "home": {
    "id": "home",
    "title": "Introduzione a Git",
    "subtitle": "Concetti e tecniche essenziali per gestire l'evoluzione e la distribuzione del tuo progetto",
    "actions": [
      {
        "text": "Perché usare Git?",
        "link": "#page-getting-started"
      },
      {
        "text": "Vai al Glossario",
        "link": "#glossary"
      },
      {
        "text": "Link utili",
        "link": "#footer"
      }
    ]
  },
  "pages": [
    {
      "id": "page-getting-started",
      "type": "standard",
      "title": "Esigenza",
      "subtitle": "Perché abbiamo bisogno di Git?",
      "background": "#f5f5f5",
      "keywords": [
        {
          "name": "Problema comune",
          "concept": "Immagina di lavorare su un progetto importante.\nUn giorno, dopo aver apportato diverse modifiche al codice, ti rendi conto che qualcosa non funziona più come dovrebbe.\nVorresti tornare alla versione precedente, ma hai già salvato più volte e non hai backup.",
          "image": "assets/images/problemi-comuni.jpg"
        },
        {
          "name": "Soluzione",
          "concept": "Git nasce proprio per risolvere questi problemi, infatti puoi:\n  • tornare a qualsiasi versione precedente del tuo codice\n  • collaborare con altri sviluppatori senza conflitti\n  • sperimentare senza rischiare di compromettere il progetto\n  • tenere traccia di chi ha fatto quali modifiche e quando",
          "image": "assets/images/git-copertina.jpg"
        },
        {
          "name": "Cos'è Git",
          "concept": "\"Git è un software per il controllo di versione distribuito utilizzabile da interfaccia a riga di comando, creato da Linus Torvalds nel 2005.\nGit (che nello slang britannico significa idiota) nacque per essere un semplice strumento per facilitare lo sviluppo del kernel Linux ed è diventato uno degli strumenti di controllo versione più diffusi.\"\n \n Fonte: Wikipedia",
          "image": "assets/images/git-copertina.jpg"
        }
      ]
    },
    {
      "id": "page-intro",
      "type": "standard",
      "title": "Introduzione a Git",
      "subtitle": "Come funziona?",
      "background": "#e0e0e0",
      "keywords": [
        {
          "name": "Repository",
          "concept": "Un repository è una cartella locale e/o remota dove Git tiene traccia di tutte le modifiche al codice.\nContiene l'intera cronologia del progetto, inclusi tutti i file e le cartelle.",
          "image": "assets/images/git-repo.png"
        },
        {
          "name": "Working Directory",
          "concept": "La working directory invece è la cartella locale sul tuo computer dove lavori ai file del progetto.\nContiene i file che stai modificando.\nCoincide con la cartella del repository, ma è determinata dal branch su cui stiamo lavorando.",
          "image": "assets/images/git-working-dir.png"
        },
        {
          "name": "Staging Area",
          "concept": "La staging area è un'area temporanea nella Working Directory dove Git tiene traccia delle modifiche che verranno incluse nel prossimo commit.\nPermette di selezionare quali modifiche includere.",
          "image": "assets/images/git-staging.png"
        },
        {
          "name": "Commit",
          "concept": "Un commit è uno snapshot delle modifiche apportate al repository.\nOgni commit ha un messaggio che descrive le modifiche effettuate e un codice hash SHA-1 che funge da ID univoco.",
          "image": "assets/images/git-overview-local.png"
        },
        {
          "name": "Tag",
          "concept": "I tag sono riferimenti che rimandano a punti specifici nella cronologia Git.\nVengono generalmente utilizzati per acquisire un punto cronologico che viene utilizzato per una versione contrassegnata (ad es. v1.0.1).",
          "image": "assets/images/git-tag.png"
        }
      ]
    },
    {
      "id": "page-file-management",
      "type": "standard",
      "title": "Gestione Base dei File",
      "subtitle": "Come tracciare le modifiche ai file nel repository",
      "background": "#f5f5f5",
      "keywords": [
        {
          "name": "Tracking dei file",
          "concept": "Git tiene traccia delle modifiche ai file nel repository, registrando quando un file viene aggiunto, modificato o eliminato.\nPer permettere questo, è necessario dire a git di iniziare a tracciare i nuovi file.\nAttenzione: rinominando un file, è come se avessimo eliminato il precedente e ne avessimo creato uno nuovo, quindi va riaggiunto.",
          "image": "assets/images/git-command-tracking.png"
        },
        {
          "name": "Staging",
          "concept": "Prima di committare le modifiche, i file devono essere aggiunti allo staging area con `git add`.",
          "image": "assets/images/git-command-staging.png"
        },
        {
          "name": "Commit",
          "concept": "Questi sono i comandi base per creare un commit.",
          "image": "assets/images/git-command-commit.png"
        },
        {
          "name": "Tag",
          "concept": "",
          "image": "assets/images/git-command-tag.png"
        },
        {
          "name": "Log",
          "concept": "I log non sono altro che la history dei nostri commit.\nPossiamo ad esempio vedere i commit del branch attivo, estrarre tutti i commit che hanno portato alla modifica di un file, confrontare le differenze tra due branch ed altro ancora.",
          "image": "assets/images/git-command-log.png"
        },
        {
          "name": ".gitignore",
          "concept": "Il .gitignore è un file che viene aggiunto nella cartella principare del progetto.\nÈ uno strumento fondamentale per specificare quali file e cartelle Git dovrebbe ignorare nel tracciamento delle modifiche.",
          "image": "assets/images/git-command-gitignore.png"
        }
      ]
    },
    {
      "id": "page-base-commands",
      "type": "custom",
      "title": "Comandi iniziali",
      "subtitle": "Comandi essenziali per creare un repository Git",
      "background": "#ffffff",
      "content": {
        "text": "La prima volta che eseguiamo Git, dovremo configurare name ed email, questi verranno associati a tutti i futuri commit.<br>Il comando git init dovrà essere eseguito nella cartella del nostro progetto",
        "image": "assets/images/code-commang-initial.png"
      }
    },
    {
      "id": "page-branch-merge",
      "type": "standard",
      "title": "Branching e Merging",
      "subtitle": "Gestione dei rami di sviluppo paralleli e loro riconciliazione",
      "background": "#e0e0e0",
      "keywords": [
        {
          "name": "Branch",
          "concept": "Il branch in Git è uno strumento fondamentale che permette di creare una \"diramazione\" del codice principale. Questo è particolarmente utile quando:\n  • Si vuole sviluppare una nuova funzionalità senza interferire con il codice principale\n  • Si devono fare correzioni di bug\n  • Si vogliono testare modifiche sperimentali",
          "image": "assets/images/git-branch.png"
        },
        {
          "name": "Merge",
          "concept": "Il merge è il processo di riconciliazione tra due branch.\nQuando abbiamo completato il lavoro su un branch e vogliamo integrare le modifiche nel branch principale (solitamente main o master), utilizziamo il comando 'git merge'.",
          "image": "assets/images/git-merge.png"
        },
        {
          "name": "Senza conflitti",
          "concept": "Git tenta sempre di risolvere i conflitti automaticamente.\nIn caso di esito positivo, prepara un messaggio per il commit con i dettagli.\nSe il comando viene eseguito da teminale, verrà chiesto di confermare il testo.\nL'editor di testo di default è Vim, dunque per salvare ed uscire dovrai digitare \":wq\" seguito da Invio.",
          "image": "assets/images/git-merge-no-conflicts.png"
        },
        {
          "name": "Con conflitti",
          "concept": "Possono invece verificarsi dei conflitti quando:\n  • Lo stesso file è stato modificato in entrambi i branch\n  • Le modifiche si sovrappongono nelle stesse righe di codice.\nPer gestire i conflitti, Git marca nel codice le aree problematiche con dei marcatori speciali",
          "image": "assets/images/git-merge-conflicts.png"
        },
        {
          "name": "Come risolvere",
          "concept": "Per risolvere il conflitto dobbiamo:\n  • Aprire i file in conflitto\n  • Decidere quali modifiche mantenere (o come combinarle)\n  • Rimuovere i marcatori di conflitto\n  • Aggiungere i file risolti con 'git add'\n  • Completare il merge con 'git commit'",
          "image": "assets/images/git-merge-conflict-commit.png"
        },
        {
          "name": "Branch - Comandi",
          "concept": "",
          "image": "assets/images/git-command-branching.png"
        },
        {
          "name": "Merge - Comandi",
          "concept": "",
          "image": "assets/images/git-command-merging.png"
        }
      ]
    },
    {
      "id": "page-remote",
      "type": "standard",
      "title": "Collaborazione Remota con Git",
      "subtitle": "Come collaborare con Git in un ambiente remoto",
      "background": "#f5f5f5",
      "keywords": [
        {
          "name": "GitHub",
          "concept": "GitHub è una piattaforma di hosting e collaborazione remota basata su Git.\nFondata nel 2008, GitHub è diventata uno degli strumenti più popolari per sviluppatori e team che lavorano su progetti software, ma è utilizzata anche per progetti di documentazione, design e molto altro.\nGitHub è ampiamente utilizzato per progetti open source, con milioni di repository pubblici disponibili.",
          "image": "assets/images/github-logo.png"
        },
        {
          "name": "Altri hosting",
          "concept": "  • GitLab: oltre alle funzionalità di hosting Git, GitLab offre strumenti integrati per CI/CD, monitoraggio e gestione dei progetti.\n  • BitBucket: Di proprietà di Atlassian, Bitbucket è particolarmente popolare tra i team che utilizzano altri strumenti Atlassian come Jira e Confluence.",
          "image": "assets/images/trio-magico.png"
        },
        {
          "name": "Clone",
          "concept": "Per iniziare a lavorare su un repository remoto, ci spostiamo nella cartella desiderata e si usa il comando 'git clone' che letteralmente clona il progetto in locale.",
          "image": "assets/images/git-clone.png"
        },
        {
          "name": "Publication",
          "concept": "Se invece abbiamo creato in locale il progetto e vogliamo caricarlo sul nostro repository remota, dobbiamo prima:\n  • creare la repo remota vuota\n  • copiare l'url\n  • impostare l'url nella repo locale con 'git remote'\n  • pushare il branch",
          "image": "assets/images/git-publication.png"
        },
        {
          "name": "Push, Pull e Fetch",
          "concept": "Questi sono i comandi base per scambiare le informazioni tra il branch attivo in locale e quello in remoto.",
          "image": "assets/images/git-command-pushpull.png"
        }
      ]
    },
    {
      "id": "page-overview",
      "type": "custom",
      "title": "Overview",
      "subtitle": "Visualizzazione grafica di tutto il flusso Git",
      "background": "#ffffff",
      "content": {
        "text": "",
        "image": "assets/images/git_overview_remote.png"
      }
    },
    {
      "id": "page-advanced-commands",
      "type": "standard",
      "title": "Comandi Avanzati",
      "subtitle": "Tecniche e comandi più sofisticati per gestire situazioni complesse",
      "background": "#f5f5f5",
      "keywords": [
        {
          "name": "Rebase",
          "concept": "Cosa fa il rebase?\n  • Riapplica i commit: prende i commit di un branch e li \"riapplica\" su un altro branch.\n  • Modifica la cronologia: a differenza del merge, il rebase riscrive la cronologia dei commit, creando una linea temporale più lineare.\n  • Evita commit di merge: non crea un commit di merge aggiuntivo, mantenendo la cronologia più pulita.\nSi usa dunque quando vogliamo matenere una cronologia lineare e pulita ed evitare commit di merge.",
          "image": "assets/images/git-rebase.png"
        },
        {
          "name": "Rebase - Comandi",
          "concept": "Quella del rebase è una procedura articolata poiché riscrive la history del branch.\nPer fare questo riapplica ogni commit singolarmente, perciò è facile avere conflitti per ogni commit.\nInoltre dopo aver pubblicato il branch, gli altri utenti dovranno necessariamente resettare il loro branch locale con quello remoto.",
          "image": "assets/images/git-command-rebase.png"
        },
        {
          "name": "Reset",
          "concept": "Il comando 'git reset' è uno strumento che permette di ripristinare lo stato del repository a un commit specifico, modificando la cronologia dei commit o l'area di staging.\nHa tre modalità:\n  • --soft: Quando vuoi annullare un commit ma mantenere le modifiche pronte per un nuovo commit.\n  • --mixed: Quando vuoi annullare un commit e rimuovere le modifiche dall'area di staging, ma mantenere le modifiche nella working directory.\n  • --hard: Quando vuoi annullare completamente un commit e ripristinare lo stato del repository a un commit precedente, eliminando tutte le modifiche non commitate.",
          "image": "assets/images/git-reset.png"
        },
        {
          "name": "Reset - Comandi",
          "concept": "",
          "image": "assets/images/git-command-reset.png"
        },
        {
          "name": "Revert",
          "concept": "Il comando 'git revert' è utilizzato per annullare le modifiche introdotte da uno o più commit precedenti, creando un nuovo commit che inverte le modifiche apportate.\nA differenza di 'git reset', 'git revert' non modifica la cronologia esistente, ma aggiunge un nuovo commit che annulla le modifiche, rendendolo sicuro da usare anche su branch condivisi.",
          "image": "assets/images/git-reset-revert.png"
        },
        {
          "name": "Revert - Comandi",
          "concept": "",
          "image": "assets/images/git-command-revert.png"
        }
      ]
    },
    {
      "id": "page-extra",
      "type": "standard",
      "title": "Tips & Tricks",
      "subtitle": "Alcuni strumenti utili per rimanere flessibili",
      "background": "#f5f5f5",
      "keywords": [
        {
          "name": "Cherry-pick",
          "concept": "Il comando 'git cherry-pick' permette di applicare un commit specifico da un branch a un altro branch.\nIn pratica, \"copia\" un commit da una parte della cronologia e lo applica al branch corrente, creando un nuovo commit con le stesse modifiche.\nÈ utile quando vuoi portare singole modifiche da un branch a un altro senza unire l'intera cronologia.",
          "image": "assets/images/git-command-cherry-pick.png"
        },
        {
          "name": "Patch",
          "concept": "La patch è un file di testo che contiene delle differenze (diff).\nLe patch sono utili per condividere modifiche tra repository o branch senza dover condividere l'intera cronologia.\nGit permette di creare e applicare patch utilizzando i comandi 'git diff' e 'git apply'.",
          "image": "assets/images/git-command-patch.png"
        },
        {
          "name": "Stash",
          "concept": "Il comando 'git stash' utilizzato per salvare temporaneamente le modifiche non ancora commitate, permettendoti di cambiare branch, pullare dal branch remoto o lavorare su altre modifiche senza dover fare commit.\nLe modifiche salvate vengono memorizzate e possono essere riapplicate in un secondo momento.",
          "image": "assets/images/git-command-stash.png"
        },
        {
          "name": "Blame",
          "concept": "Il comando 'git blame' è utilizzato per visualizzare informazioni dettagliate su ogni riga di un file, mostrando chi ha effettuato l'ultima modifica a quella riga e in quale commit.\nÈ uno strumento utile per tracciare la storia delle modifiche di un file e identificare chi ha introdotto specifiche modifiche.",
          "image": "assets/images/git-command-blame.png"
        }
      ]
    },
    {
      "id": "page-trello",
      "type": "custom",
      "title": "Trello",
      "subtitle": "Per la gestione dei task di un progetto",
      "background": "#f5f5f5",
      "content": {
        "text": "Trello è una piattaforma di gestione dei progetti e delle attività.<br>È progettata per aiutare piccoli team e individui a organizzare, tracciare e collaborare su progetti in modo visivo e intuitivo.<br>Trello utilizza board, liste e card per rappresentare task, flussi di lavoro e progressi.",
        "image": "assets/images/trello-boards.png"
      }
    },
    {
      "id": "page-best-practice",
      "type": "custom",
      "title": "Best Practices e Workflow",
      "subtitle": "Linee guida e metodologie per un utilizzo efficace di Git in team",
      "background": "#ffffff",
      "content": {
        "text": "  • Gitflow: Un flusso di lavoro comune per la collaborazione.<br>  • Convenzioni per i commit message: Scrivere messaggi di commit chiari e concisi.<br>  • Code review process: Revisionare il codice prima di unire le modifiche.<br>  • Branch naming conventions: Usare nomi significativi per i branch.<br>  • Release management: Gestire le release in modo strutturato.",
        "image": "assets/images/gitflowCompleto.png"
      }
    },
    {
      "id": "page-scenario-1",
      "type": "custom",
      "title": "Scenario 1",
      "subtitle": "Inizio un repo in locale e lo pusho su una repo nuova remota",
      "background": "#ffffff",
      "content": {
        "text": "",
        "image": "assets/images/scenario-1.png"
      }
    },
    {
      "id": "page-scenario-2",
      "type": "custom",
      "title": "Scenario 2",
      "subtitle": "Scarico le diff dal branch remoto, mettendo in stash temporaneamente le modifiche in corso",
      "background": "#ffffff",
      "content": {
        "text": "",
        "image": "assets/images/scenario-2.png"
      }
    },
    {
      "id": "page-scenario-3",
      "type": "custom",
      "title": "Scenario 3",
      "subtitle": "Faccio un rebase e devo far aggiornare gli altri utenti",
      "background": "#ffffff",
      "content": {
        "text": "",
        "image": "assets/images/scenario-3.png"
      }
    },
    {
      "id": "page-scenario-4",
      "type": "custom",
      "title": "Scenario 4",
      "subtitle": "Creo un nuovo branch e lo pusho al repository remoto",
      "background": "#ffffff",
      "content": {
        "text": "",
        "image": "assets/images/scenario-4.png"
      }
    },
    {
      "id": "page-qrcode",
      "type": "custom",
      "title": "Link alla presentazione",
      "subtitle": "",
      "background": "#ffffff",
      "content": {
        "text": "",
        "image": "assets/images/qrcode.png"
      }
    }
  ],
  "glossary": {
    "id": "glossary",
    "title": "Glossario",
    "background": "#ffffff",
    "actions": [
      {
        "text": "Home page",
        "link": "#home"
      },
      {
        "text": "Link utili",
        "link": "#footer"
      }
    ],
    "keywords": [
      {
        "name": "Repository",
        "concept": "Cartella locale/remota dove Git tiene traccia di tutte le modifiche al codice.",
        "pageId": "page-intro"
      },
      {
        "name": "Working Directory",
        "concept": "Cartella locale sul computer dove si lavora ai file del progetto.",
        "pageId": "page-intro"
      },
      {
        "name": "Staging Area",
        "concept": "Area temporanea che raggruppa le modifiche per il prossimo commit.",
        "pageId": "page-intro"
      },
      {
        "name": "Commit",
        "concept": "Snapshot delle modifiche con un messaggio descrittivo e un hash univoco.",
        "pageId": "page-intro"
      },
      {
        "name": "Tag",
        "concept": "Riferimenti a punti specifici della cronologia usati per contrassegnate dei riferimenti.",
        "pageId": "page-intro"
      },
      {
        "name": "Tracking",
        "concept": "Permette a Git di iniziare a tracciare nuovi file e registrare modifiche.",
        "pageId": "page-file-management"
      },
      {
        "name": "Log",
        "concept": "Storia dei commit che permette di analizzare modifiche e differenze.",
        "pageId": "page-file-management"
      },
      {
        "name": ".gitignore",
        "concept": "File per specificare quali file e cartelle Git deve ignorare.",
        "pageId": "page-file-management"
      },
      {
        "name": "Branch",
        "concept": "Linea di sviluppo separata utile per nuove funzionalità o correzioni.",
        "pageId": "page-branch-merge"
      },
      {
        "name": "Merge",
        "concept": "Processo di unione tra due branch per integrare le modifiche.",
        "pageId": "page-branch-merge"
      },
      {
        "name": "GitHub",
        "concept": "Piattaforma di hosting e collaborazione remota basata su Git.",
        "pageId": "page-remote"
      },
      {
        "name": "Clone",
        "concept": "Comando per copiare un repository remoto in locale.",
        "pageId": "page-remote"
      },
      {
        "name": "Push, Pull e Fetch",
        "concept": "Comandi base per scambiare aggiornare le diff tra repository locale e remoto.",
        "pageId": "page-remote"
      },
      {
        "name": "Rebase",
        "concept": "Riapplica commit da un branch per mantenere una cronologia lineare e pulita.",
        "pageId": "page-advanced-commands"
      },
      {
        "name": "Reset",
        "concept": "Ripristina il repository a uno stato precedente con tre modalità.",
        "pageId": "page-advanced-commands"
      },
      {
        "name": "Revert",
        "concept": "Crea un nuovo commit che annulla modifiche precedenti senza alterare la cronologia.",
        "pageId": "page-advanced-commands"
      },
      {
        "name": "Cherry-pick",
        "concept": "Applica un commit specifico da un branch a un altro.",
        "pageId": "page-extra"
      },
      {
        "name": "Patch",
        "concept": "File di testo con differenze usato per condividere modifiche.",
        "pageId": "page-extra"
      },
      {
        "name": "Stash",
        "concept": "Salva temporaneamente modifiche non commitate per lavorare su altro.",
        "pageId": "page-extra"
      },
      {
        "name": "Blame",
        "concept": "Mostra chi ha modificato ogni riga di un file e in quale commit.",
        "pageId": "page-extra"
      }
    ]
  },
  "footer": {
    "id": "footer",
    "title": "Grazie per l'attenzione",
    "background": "#333333",
    "quote": "Qui un po' di link utili",
    "actions": [
      {
        "text": "Home page",
        "link": "#home"
      },
      {
        "text": "Glossario",
        "link": "#glossary"
      }
    ],
    "links": [
      {
        "text": "Repository Git",
        "url": "https://github.com/git/git",
        "description": "Repository Git ufficiale del progetto Open Source."
      },
      {
        "text": "Sito ufficiale Git",
        "url": "https://git-scm.com/",
        "description": "Sito ufficiale Git per il download e la documentazione."
      },
      {
        "text": "Pagina Wikipedia",
        "url": "https://it.wikipedia.org/wiki/Git_(software)",
        "description": "Tutta la documentazione ufficiale su Git."
      },
      {
        "text": "GitHub",
        "url": "https://github.com",
        "description": "La piattaforma di hosting per repository Git."
      },
      {
        "text": "Git Cheat Sheet",
        "url": "https://education.github.com/git-cheat-sheet-education.pdf",
        "description": "PDF con tutti i comandi utili by GitHub."
      },
      {
        "text": "Raccolta di .gitignore",
        "url": "https://www.toptal.com/developers/gitignore/",
        "description": "Sito web che genera i .gitignore per ogni tipo di progetto"
      },
      {
        "text": "Playground Git",
        "url": "https://learngitbranching.js.org/?locale=it_IT",
        "description": "Sito web che genera i .gitignore per ogni tipo di progetto"
      },
      {
        "text": "Trello",
        "url": "https://trello.com/it",
        "description": "Piattaforma per creare delle board per il task management del progetto."
      },
      {
        "text": "Git GUI",
        "url": "https://git-scm.com/downloads/guis",
        "description": "Elenco di GIU per lavorare con Git"
      }
    ]
  }
}
